generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  ADMIN
  SELLER
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  picture   String   @db.Text
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stores    Store[]  @relation("UserStores")
}

model Category {
  id            String        @id @default(uuid())
  name          String
  image         String
  url           String
  featured      Boolean       @default(false)
  subCategories SubCategory[] @relation("CategoryToSubcategory")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model SubCategory {
  id       String  @id @default(uuid())
  name     String
  image    String
  url      String  @unique
  featured Boolean @default(false)

  categoryId String
  category   Category @relation("CategoryToSubcategory", fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

enum StoreStatus {
  PENDING
  ACTIVE
  BANNED
  DISABLED
}

model Store {
  id                     String      @id @default(uuid())
  name                   String
  description            String      @db.Text
  email                  String      @unique
  phone                  String      @unique
  url                    String      @unique
  logo                   String
  cover                  String
  status                 StoreStatus @default(PENDING)
  averageRating          Float       @default(0)
  featured               Boolean     @default(false)
  returnPolicy           String?     @db.Text
  defaultShippingService String?
  defaultShippingFees    Float?
  defaultDeliveryTimeMin Int?
  defaultDeliveryTimeMax Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation("UserStores", fields: [userId], references: [id])

  @@index([userId])
}
